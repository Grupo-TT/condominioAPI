name: Build and Deploy

on:
  push:
    branches: [ "master" ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: condominio-api

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Build with Maven
        run: mvn clean package -DskipTests

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push Docker Image
        run: |
          REPO_OWNER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          IMAGE_TAG=${{ env.REGISTRY }}/${REPO_OWNER}/${{ env.IMAGE_NAME }}:latest
          echo "Building image: $IMAGE_TAG"
          docker build -t $IMAGE_TAG .
          docker push $IMAGE_TAG

      - name: Copy docker-compose to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "docker-compose.yml"
          target: "/home/${{ secrets.EC2_USER }}/condominio-app/"

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd /home/${{ secrets.EC2_USER }}/condominio-app
            
            echo "üöÄ Iniciando despliegue..."
            
            # Parar contenedores actuales
            echo "‚èπÔ∏è  Parando aplicaci√≥n..."
            docker-compose down 2>/dev/null || true
            
            # Limpiar im√°genes viejas
            echo "üßπ Limpiando im√°genes viejas..."
            docker image prune -a -f
            
            # Login a GHCR
            echo "üîê Login a GHCR..."
            echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            
            # Configurar variables de entorno y ejecutar
            echo "‚¨áÔ∏è  Descargando e iniciando nueva versi√≥n..."
            GITHUB_REPOSITORY_OWNER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]') \
            DB_HOST_CONDOMINIO="${{ secrets.DB_HOST_CONDOMINIO }}" \
            DB_NAME_CONDOMINIO="${{ secrets.DB_NAME_CONDOMINIO }}" \
            USER_DB_CONDOMINIO="${{ secrets.USER_DB_CONDOMINIO }}" \
            PASSWORD_DB_CONDOMINIO="${{ secrets.PASSWORD_DB_CONDOMINIO }}" \
            EMAIL_CONDOMINIO="${{ secrets.EMAIL_CONDOMINIO }}" \
            EMAIL_PASSWORD="${{ secrets.EMAIL_PASSWORD }}" \
            JWT_EXPIRATION_TIME="${{ secrets.JWT_EXPIRATION_TIME }}" \
            JWT_SECRET_KEY="${{ secrets.JWT_SECRET_KEY }}" \
            docker-compose pull && \
            GITHUB_REPOSITORY_OWNER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]') \
            DB_HOST_CONDOMINIO="${{ secrets.DB_HOST_CONDOMINIO }}" \
            DB_NAME_CONDOMINIO="${{ secrets.DB_NAME_CONDOMINIO }}" \
            USER_DB_CONDOMINIO="${{ secrets.USER_DB_CONDOMINIO }}" \
            PASSWORD_DB_CONDOMINIO="${{ secrets.PASSWORD_DB_CONDOMINIO }}" \
            EMAIL_CONDOMINIO="${{ secrets.EMAIL_CONDOMINIO }}" \
            EMAIL_PASSWORD="${{ secrets.EMAIL_PASSWORD }}" \
            JWT_EXPIRATION_TIME="${{ secrets.JWT_EXPIRATION_TIME }}" \
            JWT_SECRET_KEY="${{ secrets.JWT_SECRET_KEY }}" \
            docker-compose up -d
            
            # Verificar
            echo "‚è≥ Verificando despliegue..."
            sleep 15
            
            echo "üìä Estado:"
            docker-compose ps
            
            echo "üìã Logs:"
            docker-compose logs --tail=20
            
            echo "üíæ Espacio disponible:"
            df -h /
            
            echo "‚úÖ Despliegue completado!"
            